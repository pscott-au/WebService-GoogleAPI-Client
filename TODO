# vim: ft=markdown
we're trying to take care of a bunch of things.

# better support for service accounts

We did a number on the architecture to allow for pluggable storage backends.
I think some more improvement could be had, but hey, it's a start.

We need to document ::Client::AccessToken (and why it's there).

We also need to dress the res with the token used to create it (for introspection)

We need to make auth_storage in the ua make sure the attached object is a
consumer of our role.

We must document our role, and the two consumers that we have.

#Other Issues

## Less logic on repeated calls

We'd like to implement a cache for constructing calls, b/c it
works WAAAY too hard. Constructing 100 calls to
sheets.spreadsheets.values.batchGetByDataFilter made my CPU churn
like a tell, and for way too long, too.

Maybe even go for dynamic class creation, similar to what OpenAPI
producers use. Although I'm thinking of just moving over to using
gRPC, which does actually have a perl client (seemingly).


## Encapsulate logic better

I'd like to abstract the interpolation and crud into a seperate
module, so that I could use it to make the inner requests for a
batch request.

## Use generators instead

I'd like to implement generators for the main ua, and use that as
an interface for adding the headers and crud. The only reason to
not use the 'start' hook is b/c we don't want our auth stuff on a
request for a token. Unless it doesn't matter...

We need some live tests that we'll put in the xt directory, so
that we can be sure that when it's live things work.

## Test suite is filled with garbage

We must fix all the weird warnings in the test suite, and improve
our coverage and stuff.

Move everything to Test2.
