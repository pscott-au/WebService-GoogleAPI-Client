# vim: ft=markdown

# better support for service accounts

We did a number on the architecture to allow for pluggable storage backends.
I think some more improvement could be had, but hey, it's a start.


- test that auth_storage only takes our subclasses

- get a real test down which uses normal creds and uses service account creds
  i guess to read rows from a spreadsheet (like we have in some $work code)

- test that there are sensible explosions when an endpoint does not exist

We must document the two storage backends that we have.

# Make this more idiomatic

Allow users to make requests like this
  $gapi->api_query('drive.files.list', $options)

Allow boolean values to be coerced from truthy or falsy values (except for
explicit false)

#Other Issues

## Less logic on repeated calls

We'd like to implement a cache for constructing calls, b/c it
works WAAAY too hard. Constructing 100 calls to
sheets.spreadsheets.values.batchGetByDataFilter made my CPU churn
like a tell, and for way too long, too.

Maybe even go for dynamic class creation, similar to what OpenAPI
producers use. Although I'm thinking of just moving over to using
gRPC, which does actually have a perl client (seemingly).

It just hit me that it could be some of the slowness comes from checking that
you're authenticated for the request.


## Encapsulate logic better

I'd like to abstract the interpolation and crud into a seperate
module, so that I could use it to make the inner requests for a
batch request.

## Use generators instead

I'd like to implement generators for the main ua, and use that as
an interface for adding the headers and crud. The only reason to
not use the 'start' hook is b/c we don't want our auth stuff on a
request for a token. Unless it doesn't matter...

We need some live tests that we'll put in the xt directory, so
that we can be sure that when it's live things work.

## Test suite is filled with garbage

We must fix all the weird warnings in the test suite, and improve
our coverage and stuff.

Move everything to Test2.
